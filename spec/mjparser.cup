

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   	boolean errorDetected = false;
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

/* Terminals */

terminal PROG, NAMESPACE;
terminal IF, ELSE, BREAK, CONTINUE;
terminal FOR;
terminal PRINT, READ;
terminal STATIC, CONST;
terminal VOID, RETURN;
terminal PLUS, MINUS, MUL, DIV, MOD;
terminal EQ, NEQ, GT, GTE, LT, LTE;
terminal AND, OR;
terminal INC, DEC;
terminal COLON, DOT, SEMI, ASSIGN, COMMA;
terminal LSQUARE, RSQUARE, LPAREN, RPAREN, LBRACE, RBRACE;
terminal NEW;
terminal String IDENT;
terminal Integer NUMBER;
terminal Character CHAR;
terminal Boolean BOOLEAN;


/* Non-terminals */

nonterminal NamespaceDeclList, ConstVarDeclList;
nonterminal Namespace;
nonterminal ConstDecl, VarDecl;
nonterminal MethodVarDeclList;
nonterminal ConstTypeList;
nonterminal ConstDeclList, VarDeclList, MethodDeclList;
nonterminal LastVarDecl, MultipleVarDecl;	
nonterminal FormPars, FormParsList, FormParamDecl;
nonterminal StatementList, Statement;
nonterminal Condition, Expr, CondTerm, CondFact, Term, Factor;
nonterminal Relop, Addop, Mulop, Assignop;
nonterminal DesignatorDecl, DesignatorList;
nonterminal ActPars, ActParsList;
nonterminal Label;
nonterminal DesignatorStatement, DesignatorStmtList;
nonterminal ForDesignatorStmtList, ForCondition;
nonterminal IfCondition;
nonterminal ArraySquares;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgramName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator, MethodTypeAndName, MethodDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;

/* Precedences */

precedence left ELSE;

Program ::= (Program) PROG ProgramName:p NamespaceDeclList ConstVarDeclList LBRACE MethodDeclList RBRACE;

ProgramName ::= (ProgramName) IDENT:programName;

NamespaceDeclList ::= (MultipleNamespaceDecl) NamespaceDeclList Namespace
		           	|
		           	(NoNamespaceDecl) /* epsilon */
		           	;

Namespace ::= (Namespace) NAMESPACE IDENT LBRACE ConstVarDeclList LBRACE MethodDeclList RBRACE RBRACE;

ConstVarDeclList ::= (DeclListForConst) ConstVarDeclList ConstDecl
				   |
				   (DeclListForVar) ConstVarDeclList VarDecl
				   |
				   (NoDeclList) /* epsilon */
				   ; 
			
ConstDecl ::= (ConstDecl) CONST Type:constType IDENT:constName ASSIGN ConstTypeList ConstDeclList SEMI;


VarDecl ::= (VarDecl) Type:varType VarDeclList;
	  	  
VarDeclList ::= (MultipleVariables) MultipleVarDecl VarDeclList
			  |
			  (SingleVariable) LastVarDecl
			  ;
			  
MultipleVarDecl ::= (MultipleVariablesDecl) IDENT:varName ArraySquares COMMA
				  |
				  (VariableDeclCommaError) error COMMA:l
				  {: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null); :}
				  ;
				  
LastVarDecl ::= (LastVariableDecl) IDENT:varName ArraySquares SEMI
			  |
			  (VariableDeclSemiError) error SEMI:l
			  {: parser.report_error("Izvrsen oporavaka do ; u liniji " + lleft, null); :}
			  ;

ArraySquares ::= (Squares) LSQUARE RSQUARE 
			   |
			   (NoSquares) /* epsilon */
			   ;

ConstTypeList ::= (ConstInt) NUMBER:value 
				| (ConstChar) CHAR:value
				| (ConstBool) BOOLEAN:value
				;

ConstDeclList ::= (ConstDeclarationList) ConstDeclList COMMA IDENT:constName ASSIGN ConstTypeList
				|
				(NoConstDeclarations) /* epsilon */
				;

Type ::= (Identifier) IDENT:typeName
	   |
	   (IdentifierWithNamespace) IDENT:outerTypeName COLON COLON IDENT:innerTypeName
	   ;
			  
MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl 
  				 |
  				 (NoMethodDeclarations) /* epsilon */
  				 ;
  				 
MethodDecl ::= (MethodDecl) MethodTypeAndName LPAREN FormPars RPAREN MethodVarDeclList LBRACE StatementList RBRACE;
			 

MethodVarDeclList ::= (MethodVariableDeclarations) MethodVarDeclList VarDecl
				   |
				   (NoMethodVariableDeclarations) /* epsilon */
				   ; 

MethodTypeAndName ::= (MethodTypeName) Type:retType IDENT:methodName
			 | 
			 (MethodVoidType) VOID IDENT:methodName
			 ;

FormPars ::= (FormalParamsList) FormParsList 
		   |
		   (NoFormalParams) /* epsilon */
		   ;
		   
FormParamDecl ::= (FormParamDecl) Type:paramType IDENT:paramName ArraySquares;

FormParsList ::= (MultipleFormalParams) FormParamDecl COMMA FormParsList
			   |
			   (SingleFormalParam) FormParamDecl
			   |
			   (FormalParamsCommaError) error COMMA:l
			   {: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null); :}
			   FormParsList
			   |
			   (FormalParamsParenError) error:l
			   {: parser.report_error("Izvrsen oporavak do ) u liniji " + lleft, null); :}
			   ;
			   
			   
StatementList ::= (MultipleStatements) StatementList Statement
			    |
			    (NoStatement) /* epsilon */
			    ;
			    			    
Statement ::= (DesignatorStmt) DesignatorStatement SEMI
			|
			(IfStatement) IfCondition Statement
			|
			(IfElseStatement) IfCondition Statement ELSE Statement
			|
			(BreakStatement) BREAK SEMI
			|
			(ContinueStatement) CONTINUE SEMI
			|
			(ReturnExpressionStatement) RETURN Expr:returnExpr SEMI
			|
			(ReturnEmptyStatement) RETURN SEMI
			|
			(ReadStatement) READ LPAREN Designator RPAREN SEMI
			|
			(PrintStatement) PRINT LPAREN Expr:e RPAREN SEMI
			|
			(PrintExpressionStatement) PRINT LPAREN Expr:e COMMA NUMBER RPAREN SEMI
			|
			(ForStatement) FOR LPAREN ForDesignatorStmtList SEMI ForCondition SEMI ForDesignatorStmtList RPAREN Statement
			|
			(BlockStatementList) LBRACE StatementList RBRACE
			|
			(StatementError) error SEMI:l
			{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :}
			;
			
IfCondition ::= (IfWithCondition) IF LPAREN Condition RPAREN
			  |
			  (ErrorInIfCondition) IF LPAREN error RPAREN:l
			  {: parser.report_error("Izvrsen oporavak do ) u liniji " + lleft, null); :}
			  ;
			  
			
ForDesignatorStmtList ::= (ForMultipleStatements) ForDesignatorStmtList COMMA DesignatorStatement
						 |
						 (ForSingleStatement) DesignatorStatement 
						 |
						 (ForNoStatements) /* epsilon */
						 ;
			
ForCondition ::= (ForWithCondition) CondFact
			   |
			   (ForNoCondition) /* epsilon */
			   ;

Condition ::= (MultipleConditionTerms) Condition OR CondTerm 
			|
			(SingleConditionTerm) CondTerm
			;
			   
CondTerm ::= (MultipleConditionFactors) CondTerm AND CondFact
		   |
		   (SingleConditionFactor) CondFact
		   ;
		   
CondFact ::= (SingleExprCond) Expr:exp
		   |
		   (MultipleExprCond)Expr:exp1 Relop Expr:exp2
		   ;
		   
Expr ::= (ExprMultipleTerm) Expr:texp Addop Term:t
	   |
	   (ExprMultipleTermMinus) Expr:texp Addop MINUS Term:t
	   |
	   (ExprSingleTerm) Term:t
	   | 
	   (ExprSingleTermMinus) MINUS Term:t
	   ;
	   
Term ::= (TermMultipleFactors) Term:fterm Mulop Factor:f
	   |
	   (TermSingleFactor) Factor:f
	   ;
	   
Factor ::= (FactorDesignator) DesignatorDecl 
		 | 
		 (FactorConstant) ConstTypeList
	   	 |
	   	 (FactorNewArray) NEW Type:factorType LSQUARE Expr:e RSQUARE
	   	 |
	   	 (FactorNewTypeNoParams) NEW Type:factorType LPAREN RPAREN
	   	 |
	   	 (FactorNewType) NEW Type:factorType LPAREN ActPars RPAREN
	   	 |
	   	 (FactorExpression) LPAREN Expr RPAREN
	   	 ;
	   	 
DesignatorDecl ::= (DesignatorDeclaration) Designator 
				 | 
				 (DesignatorFunctionCallNoParams) Designator LPAREN RPAREN
				 |
				 (DesignatorFunctionCall) Designator LPAREN ActPars RPAREN
	   	 		 ;
	   	 		 
Designator ::= (DesignatorNamespace) IDENT:outerTypeName COLON COLON IDENT:innerName DesignatorList
			 |
			 (DesignatorGlobal) IDENT:identName DesignatorList
			 ;
			 
DesignatorList ::= (DesignatorListDot) DesignatorList DOT IDENT:id
				 |
				 (DesignatorListArray) DesignatorList LSQUARE Expr:e RSQUARE
				 |
				 (NoDesignatorList) /* epsilon */
				 ;
				 
DesignatorStatement ::= (DesignatorAssignment) Designator:d Assignop Expr:e
					  |
					  (DesignatorFunctionNoParams) Designator:d LPAREN RPAREN
					  |
					  (DesignatorFunctionAndParams) Designator:d LPAREN ActPars RPAREN
					  |
					  (DesignatorIncrement) Designator:d INC
					  |
					  (DesignatorDecrement) Designator:d DEC
					  |
					  (DesignatorUnpacking) LSQUARE DesignatorStmtList MUL Designator:d1 RSQUARE ASSIGN Designator:d2
					  ;
				 
DesignatorStmtList ::= (DesignatorListEmpty) DesignatorStmtList COMMA 
					 |
					 (DesignatorListElement) DesignatorStmtList Designator:d COMMA
					 |
					 (NoDesignatorStmtList) /* epsilon */
					 ;
				 
ActPars ::= (ActPars) Expr:e ActParsList;

ActParsList ::= (ActualParamsList) ActParsList COMMA Expr:e
			  | 
			  (NoActualParamsList)
			  /* epsilon */
			  ;
				 
Label ::= (Label) IDENT:id;

Assignop ::= (Assignop) ASSIGN;
	   	 		 
Relop ::= (Equal) EQ 
		| 
		(NotEqual) NEQ 
		| 
		(Greater) GT 
		|
		(GreaterOrEqual)  GTE 
		|
		(Less) LT 
		| 
		(LessOrEqual) LTE
		;

Addop ::= (Add) PLUS 
		| 
		(Subtract) MINUS
		;

Mulop ::= (Multiply) MUL 
		| 
		(Divide) DIV 
		| 
		(Modulo) MOD
		;