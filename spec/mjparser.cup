

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   	boolean errorDetected = false;
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

/* Terminals */

terminal PROG, NAMESPACE;
terminal IF, ELSE, BREAK, CONTINUE;
terminal FOR;
terminal PRINT, READ;
terminal STATIC, CONST;
terminal VOID, RETURN;
terminal PLUS, MINUS, MUL, DIV, MOD;
terminal EQ, NEQ, GT, GTE, LT, LTE;
terminal AND, OR;
terminal INC, DEC;
terminal COLON, DOT, SEMI, ASSIGN, COMMA;
terminal LSQUARE, RSQUARE, LPAREN, RPAREN, LBRACE, RBRACE;
terminal NEW;
terminal String IDENT;
terminal Integer NUMBER;
terminal Character CHAR;
terminal Boolean BOOLEAN;


/* Non-terminals */

nonterminal NamespaceDeclList, ConstVarDeclList;
nonterminal Namespace, NamespaceStart;
nonterminal ConstDecl, VarDecl;
nonterminal MethodVarDeclList;
nonterminal ConstAssign;
nonterminal ConstDeclList, VarDeclList, MethodDeclList;
nonterminal LastVarDecl, MultipleVarDecl;	
nonterminal FormPars, FormParsList, FormParamDecl;
nonterminal StatementList, Statement;
nonterminal Relop, Addop, Mulop, Assignop;
nonterminal ActPars, ActParsList;
nonterminal Label;
nonterminal DesignatorStatement, DesignatorStmtList;
nonterminal ForDesignatorStmtList, ForCondition, ForStart;
nonterminal IfCondition, IfStart, ElseStart;
nonterminal ArraySquares;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgramName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator, MethodTypeAndName, MethodDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expr, Term, Factor;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Condition, CondFact, CondTerm;

/* Precedences */

precedence left ELSE;

Program ::= (Program) PROG ProgramName:p NamespaceDeclList ConstVarDeclList LBRACE MethodDeclList RBRACE;

ProgramName ::= (ProgramName) IDENT:programName;

NamespaceDeclList ::= (MultipleNamespaceDecl) NamespaceDeclList Namespace
		           	|
		           	(NoNamespaceDecl) /* epsilon */
		           	;

Namespace ::= (Namespace) NamespaceStart LBRACE ConstVarDeclList LBRACE MethodDeclList RBRACE RBRACE;

NamespaceStart ::= (NamespaceStart) NAMESPACE IDENT:namespaceName;

ConstVarDeclList ::= (DeclListForConst) ConstVarDeclList ConstDecl
				   |
				   (DeclListForVar) ConstVarDeclList VarDecl
				   |
				   (NoDeclList) /* epsilon */
				   ; 
			
ConstDecl ::= (ConstDecl) CONST Type:constType ConstAssign ConstDeclList SEMI;

ConstAssign ::= (ConstInt) IDENT:constName ASSIGN NUMBER:value 
			  |
			  (ConstChar) IDENT:constName ASSIGN CHAR:value
			  |
			  (ConstBool) IDENT:constName ASSIGN BOOLEAN:value
			  ;
			  
VarDecl ::= (VarDecl) Type:varType VarDeclList;
	  	  
VarDeclList ::= (MultipleVariables) MultipleVarDecl VarDeclList
			  |
			  (SingleVariable) LastVarDecl
			  ;
			  
MultipleVarDecl ::= (MultipleVariablesDecl) IDENT:varName ArraySquares COMMA
				  |
				  (VariableDeclCommaError) error COMMA:l
				  {: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null); :}
				  ;
				  
LastVarDecl ::= (LastVariableDecl) IDENT:varName ArraySquares SEMI
			  |
			  (VariableDeclSemiError) error SEMI:l
			  {: parser.report_error("Izvrsen oporavaka do ; u liniji " + lleft, null); :}
			  ;

ArraySquares ::= (Squares) LSQUARE RSQUARE 
			   |
			   (NoSquares) /* epsilon */
			   ;

ConstDeclList ::= (ConstDeclarationList) ConstDeclList COMMA ConstAssign
				|
				(NoConstDeclarations) /* epsilon */
				;

Type ::= (Identifier) IDENT:typeName
	   |
	   (IdentifierWithNamespace) IDENT:outerTypeName COLON COLON IDENT:innerTypeName
	   ;
			  
MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl 
  				 |
  				 (NoMethodDeclarations) /* epsilon */
  				 ;
  				 
MethodDecl ::= (MethodDecl) MethodTypeAndName LPAREN FormPars RPAREN MethodVarDeclList LBRACE StatementList RBRACE;
			 

MethodVarDeclList ::= (MethodVariableDeclarations) MethodVarDeclList VarDecl
				   |
				   (NoMethodVariableDeclarations) /* epsilon */
				   ; 

MethodTypeAndName ::= (MethodTypeName) Type:retType IDENT:methodName
			 | 
			 (MethodVoidType) VOID IDENT:methodName
			 ;

FormPars ::= (FormalParamsList) FormParsList 
		   |
		   (NoFormalParams) /* epsilon */
		   ;
		   
FormParamDecl ::= (FormParamDecl) Type:paramType IDENT:paramName ArraySquares;

FormParsList ::= (MultipleFormalParams) FormParamDecl COMMA FormParsList
			   |
			   (SingleFormalParam) FormParamDecl
			   |
			   (FormalParamsCommaError) error COMMA:l
			   {: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null); :}
			   FormParsList
			   |
			   (FormalParamsParenError) error:l
			   {: parser.report_error("Izvrsen oporavak do ) u liniji " + lleft, null); :}
			   ;
			   
			   
StatementList ::= (MultipleStatements) StatementList Statement
			    |
			    (NoStatement) /* epsilon */
			    ;
			    			    
Statement ::= (DesignatorStmt) DesignatorStatement SEMI
			|
			(IfStatement) IfCondition Statement
			|
			(IfElseStatement) IfCondition Statement ElseStart Statement
			|
			(BreakStatement) BREAK SEMI
			|
			(ContinueStatement) CONTINUE SEMI
			|
			(ReturnExpressionStatement) RETURN Expr:returnExpr SEMI
			|
			(ReturnEmptyStatement) RETURN SEMI
			|
			(ReadStatement) READ LPAREN Designator RPAREN SEMI
			|
			(PrintStatementNoWidth) PRINT LPAREN Expr:e RPAREN SEMI
			|
			(PrintStatementWidth) PRINT LPAREN Expr:e COMMA NUMBER:width RPAREN SEMI
			|
			(ForStatement) ForStart ForDesignatorStmtList SEMI ForCondition SEMI ForDesignatorStmtList RPAREN Statement
			|
			(BlockStatementList) LBRACE StatementList RBRACE
			|
			(StatementError) error SEMI:l
			{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :}
			;
			
ForStart ::= (ForStart) FOR LPAREN;
			
IfCondition ::= (IfWithCondition) IfStart LPAREN Condition RPAREN
			  |
			  (ErrorInIfCondition) IfStart LPAREN error RPAREN:l
			  {: parser.report_error("Izvrsen oporavak do ) u liniji " + lleft, null); :}
			  ;
			 
IfStart ::= (IfStart) IF;

ElseStart ::= (ElseStart) ELSE;
			
ForDesignatorStmtList ::= (ForMultipleStatements) ForDesignatorStmtList COMMA DesignatorStatement
						 |
						 (ForSingleStatement) DesignatorStatement 
						 |
						 (ForNoStatements) /* epsilon */
						 ;
			
ForCondition ::= (ForWithCondition) CondFact
			   |
			   (ForNoCondition) /* epsilon */
			   ;

Condition ::= (MultipleConditionTerms) Condition OR CondTerm 
			|
			(SingleConditionTerm) CondTerm
			;
			   
CondTerm ::= (MultipleConditionFactors) CondTerm AND CondFact
		   |
		   (SingleConditionFactor) CondFact
		   ;
		   
CondFact ::= (SingleExprCond) Expr:exp
		   |
		   (MultipleExprCond) Expr:exp1 Relop Expr:exp2
		   ;
		   
Expr ::= (ExprMultipleTerm) Expr:texp Addop Term:t
	   |
	   (ExprSingleTerm) Term:t
	   | 
	   (ExprSingleTermMinus) MINUS Term:t
	   ;
	   
Term ::= (TermMultipleFactors) Term:fterm Mulop Factor:f
	   |
	   (TermSingleFactor) Factor:f
	   ;
	   
Factor ::= (FactorDesignatorVar) Designator:varName
		 |
		 (FactorDesignatorFunction) Designator LPAREN ActPars RPAREN
		 | 
		 (FactorConstNum) NUMBER:value
		 |
		 (FactorConstChar) CHAR:value
		 |
		 (FactorConstBoolean) BOOLEAN:value
	   	 |
	   	 (FactorNewArray) NEW Type:factorType LSQUARE Expr:e RSQUARE
	   	 |
	   	 (FactorNewType) NEW Type:factorType LPAREN ActPars RPAREN
	   	 |
	   	 (FactorExpression) LPAREN Expr RPAREN
	   	 ;
	   	 		 
Designator ::= (DesignatorNamespace) IDENT:outerTypeName COLON COLON IDENT:innerName 
			 |
			 (DesignatorVariable) IDENT:identName 
			 |
			 (DesignatorListArray) Designator LSQUARE Expr:e RSQUARE
			 |
			 (DesignatorListDot) Designator DOT IDENT:id
			 ;
				 
DesignatorStatement ::= (DesignatorAssignment) Designator:d Assignop Expr:e
					  |
					  (FunctionCall) Designator:d LPAREN ActPars RPAREN
					  |
					  (DesignatorIncrement) Designator:d INC
					  |
					  (DesignatorDecrement) Designator:d DEC
					  |
					  (DesignatorUnpacking) LSQUARE DesignatorStmtList MUL Designator:d1 RSQUARE ASSIGN Designator:d2
					  ;
				 
DesignatorStmtList ::= (DesignatorListEmpty) DesignatorStmtList COMMA 
					 |
					 (DesignatorListElement) DesignatorStmtList Designator:d COMMA
					 |
					 (NoDesignatorStmtList) /* epsilon */
					 ;
				 
ActPars ::= (ActualPars) ActParsList
		  |
		  (NoActualPars) /* epsilon */
		  ;

ActParsList ::= (ActualParams) ActParsList COMMA Expr:e
			  | 
			  (ActualParam) Expr:e
			  ;
				 
Label ::= (Label) IDENT:id;

Assignop ::= (Assignop) ASSIGN;
	   	 		 
Relop ::= (Equal) EQ 
		| 
		(NotEqual) NEQ 
		| 
		(Greater) GT 
		|
		(GreaterOrEqual)  GTE 
		|
		(Less) LT 
		| 
		(LessOrEqual) LTE
		;

Addop ::= (Add) PLUS 
		| 
		(Subtract) MINUS
		;

Mulop ::= (Multiply) MUL 
		| 
		(Divide) DIV 
		| 
		(Modulo) MOD
		;